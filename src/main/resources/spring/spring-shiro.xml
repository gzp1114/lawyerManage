<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

	<description>== Shiro Components ==</description>

	<!-- 会话Session ID生成器 -->
	<bean id="sessionIdGenerator"
		class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

	<!-- session 创建、删除、查询 -->
	<bean id="jedisShiroSessionRepository"
		class="com.lawyer.cores.shiro.cache.JedisShiroSessionRepository">
		<property name="jedisManager" ref="jedisManager" />
	</bean>

	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!--cookie的name，我故意取名叫xxxxbaidu -->
		<constructor-arg value="SHRIOSESSIONID" />
		<property name="httpOnly" value="true" />
		<!--cookie的有效时间 -->
		<property name="maxAge" value="-1" />
	</bean>
	<!-- custom shiro session listener -->
	<bean id="customSessionListener" class="com.lawyer.cores.shiro.listenter.CustomSessionListener">
		<property name="shiroSessionRepository" ref="jedisShiroSessionRepository" />
	</bean>
	<!-- 用户信息记住我功能的相关配置 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="RESHRIOSESSIONID" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="864000" /><!-- 10天时间，记住我10天 -->
	</bean>
	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
		<property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('6AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>
	<!-- custom shiro session listener -->
	<bean id="customShiroSessionDAO" class="com.lawyer.cores.shiro.CustomShiroSessionDAO">
		<property name="shiroSessionRepository" ref="jedisShiroSessionRepository" />
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</bean>
	<!-- 手动操作Session，管理Session -->
	<bean id="customSessionManager" class="com.lawyer.cores.shiro.session.CustomSessionManager">
		<property name="shiroSessionRepository" ref="jedisShiroSessionRepository" />
		<property name="customShiroSessionDAO" ref="customShiroSessionDAO" />
	</bean>
	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<!-- 间隔多少时间检查，不配置是60分钟 -->
		<property name="interval" value="18000000" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- 用户缓存 -->
	<bean id="customShiroCacheManager"
		class="com.lawyer.cores.shiro.cache.impl.CustomShiroCacheManager">
		<property name="shiroCacheManager" ref="jedisShiroCacheManager" />
	</bean>

	<!-- shiro 缓存实现，对ShiroCacheManager，我是采用redis的实现 -->
	<bean id="jedisShiroCacheManager"
		class="com.lawyer.cores.shiro.cache.impl.JedisShiroCacheManager">
		<property name="jedisManager" ref="jedisManager" />
	</bean>
	<!-- redis 的缓存 -->
	<bean id="jedisManager" class="com.lawyer.cores.shiro.cache.JedisManager">
		<property name="jedisPool" ref="jedisPool" />
	</bean>
	<!-- 静态注入，相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>
	<!-- 静态注入 jedisShiroSessionRepository -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="com.lawyer.cores.shiro.filter.KickoutSessionFilter.setShiroSessionRepository" />
		<property name="arguments" ref="jedisShiroSessionRepository" />
	</bean>


	<!-- 配置进行授权和认证的 Realm -->
	<bean id="myShiroRealm" class="com.lawyer.cores.shiro。MyShiroRealm">
	</bean>
	<!-- 配置 Shiro 的 SecurityManager Bean -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myShiroRealm" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="rememberMeManager" ref="rememberMeManager" />
		<property name="cacheManager" ref="customShiroCacheManager" />
	</bean>
	
	<!-- Session Manager -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 相隔多久检查一次session的有效性   -->
	 	<property name="sessionValidationInterval" value="1800000"/>  
	 	 <!-- session 有效时间为半小时 （毫秒单位）-->  
	<property name="globalSessionTimeout" value="1800000"/>
	   <property name="sessionDAO" ref="customShiroSessionDAO"/>
	   <!-- session 监听，可以多个。 -->
	   <property name="sessionListeners">
	       <list>
	           <ref bean="customSessionListener"/>
	       </list>
	   </property>
	   <!-- 间隔多少时间检查，不配置是60分钟 -->	
	  <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
	  <!-- 是否开启 检测，默认开启 -->
	  <property name="sessionValidationSchedulerEnabled" value="true"/>
	   <!-- 是否删除无效的，默认也是开启 -->
	  <property name="deleteInvalidSessions" value="true"/>
		<!-- 会话Cookie模板 -->
	   <property name="sessionIdCookie" ref="sessionIdCookie"/>
	</bean>
	
	<!-- 认证数据库存储-->
    <bean id="shiroManager" class="com.lawyer.cores.shiro.service.impl.ShiroManagerImpl"/>
    <bean id="login" class="com.lawyer.cores.shiro.filter.LoginFilter"/>
    <bean id="role" class="com.lawyer.cores.shiro.filter.RoleFilter"/>
    <bean id="permission" class="com.lawyer.cores.shiro.filter.PermissionFilter"/>
    <bean id="simple" class="com.lawyer.cores.shiro.filter.SimpleAuthFilter"/>
    <!-- session 校验单个用户是否多次登录 -->
	<bean id="kickoutSessionFilter" class="com.lawyer.cores.shiro.filter.KickoutSessionFilter">
		<property name="kickoutUrl" value="/u/login.shtml?kickout" />
	</bean>

	<!-- 启用shrio授权注解拦截方式 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 装配 securityManager -->
		<property name="securityManager" ref="securityManager" />
		<!-- 配置登陆页面 -->
		<property name="loginUrl" value="/login.jsp" />
		<!-- 登陆成功后的一面 -->
		<property name="successUrl" value="/jsp/success.jsp" />
		<!-- 如果您请求的资源不再您的权限范围，则跳转到/403请求地址 -->
		<property name="unauthorizedUrl" value="/403" />
		
		<!-- 具体配置需要拦截哪些 URL, 以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦截. -->
		<!-- <property name="filterChainDefinitions">
			<value>
				anon表示此地址不需要任何权限即可访问
				/static/**=anon
				perms[user:query]表示访问此连接需要权限为user:query的用户
				/user=perms[user:query]
				roles[manager]表示访问此连接需要用户的角色为manager
				/user/add=roles[manager]
				/user/del/**=roles[admin]
				/user/edit/**=roles[manager]
				所有的请求(除去配置的静态资源请求或请求地址为anon的请求)都要通过登录验证,如果未登录则跳到/login
				/** = authc
			</value>
		</property> -->
		
		<property name="filterChainDefinitions" value="#{shiroManager.loadFilterChainDefinitions()}"/>   
       <property name="filters">
           <util:map>
              <entry key="login" value-ref="login"></entry>
              <entry key="role" value-ref="role"></entry>
              <entry key="simple" value-ref="simple"></entry>
              <entry key="permission" value-ref="permission"></entry>
              <entry key="kickout" value-ref="kickoutSessionFilter"></entry>
           </util:map>
       </property>
		
	</bean>

	<!-- 配置 Bean 后置处理器: 会自动的调用和 Spring 整合后各个组件的生命周期方法. -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
</beans> 